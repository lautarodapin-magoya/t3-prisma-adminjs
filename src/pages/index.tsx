import Head from "next/head"
import Link from "next/link"
import {RouterOutputs, api} from "@/utils/api"
import {ColumnOrderState, PaginationState, createColumnHelper, flexRender, getCoreRowModel, useReactTable} from '@tanstack/react-table'
import React from 'react'

export default function Home() {

    const [columnOrder, setColumnOrder] = React.useState<ColumnOrderState>([])
    const [pagination, setPagination] =
        React.useState<PaginationState>({
            pageIndex: 0,
            pageSize: 1,
        })
    const {data, isLoading, isFetching} = api.example.getAll.useQuery({
        ...pagination
    }, {
        keepPreviousData
            : true
    })
    // const pagination = React.useMemo(
    //     () => ({
    //         pageIndex,
    //         pageSize,
    //     }),
    //     [pageIndex, pageSize]
    // )
    const table = useReactTable({
        data: data?.persons ?? [],
        columns,
        pageCount: data?.pageCount ?? -1,
        onPaginationChange: setPagination,
        state: {
            columnOrder,
            pagination,
        },
        onColumnOrderChange: setColumnOrder,
        getCoreRowModel: getCoreRowModel(),
        manualPagination: true,
        debugTable: true,
    })

    if (isLoading) return <>Loadig...</>
    return (
        <>
            <Head>
                <title>Create T3 App</title>
                <meta name="description" content="Generated by create-t3-app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <main className="flex min-h-screen flex-col items-center justify-center">
                <table>
                    <thead>
                        {table.getHeaderGroups().map(headerGroup => (
                            <tr key={headerGroup.id}>
                                {headerGroup.headers.map(header => (
                                    <th key={header.id}>
                                        {header.isPlaceholder
                                            ? null
                                            : flexRender(
                                                header.column.columnDef.header,
                                                header.getContext()
                                            )}
                                    </th>
                                ))}
                            </tr>
                        ))}
                    </thead>
                    <tbody>
                        {table.getRowModel().rows.map(row => (
                            <tr key={row.id}>
                                {row.getVisibleCells().map(cell => (
                                    <td key={cell.id}>
                                        {flexRender(cell.column.columnDef.cell, cell.getContext())}
                                    </td>
                                ))}
                            </tr>
                        ))}
                    </tbody>
                    <tfoot>
                        {table.getFooterGroups().map(footerGroup => (
                            <tr key={footerGroup.id}>
                                {footerGroup.headers.map(header => (
                                    <th key={header.id}>
                                        {header.isPlaceholder
                                            ? null
                                            : flexRender(
                                                header.column.columnDef.footer,
                                                header.getContext()
                                            )}
                                    </th>
                                ))}
                            </tr>
                        ))}
                    </tfoot>
                </table>
                <div className="h-2" />
                <div className="flex items-center gap-2">
                    <button
                        className="border rounded p-1"
                        onClick={() => table.setPageIndex(0)}
                        disabled={!table.getCanPreviousPage()}
                    >
                        {'<<'}
                    </button>
                    <button
                        className="border rounded p-1"
                        onClick={() => table.previousPage()}
                        disabled={!table.getCanPreviousPage()}
                    >
                        {'<'}
                    </button>
                    <button
                        className="border rounded p-1"
                        onClick={() => table.nextPage()}
                        disabled={!table.getCanNextPage()}
                    >
                        {'>'}
                    </button>
                    <button
                        className="border rounded p-1"
                        onClick={() => table.setPageIndex(table.getPageCount() - 1)}
                        disabled={!table.getCanNextPage()}
                    >
                        {'>>'}
                    </button>
                    <span className="flex items-center gap-1">
                        <div>Page</div>
                        <strong>
                            {table.getState().pagination.pageIndex + 1} of{' '}
                            {table.getPageCount()}
                        </strong>
                    </span>
                    <span className="flex items-center gap-1">
                        | Go to page:
                        <input
                            type="number"
                            defaultValue={table.getState().pagination.pageIndex + 1}
                            onChange={e => {
                                const page = e.target.value ? Number(e.target.value) - 1 : 0
                                table.setPageIndex(page)
                            }}
                            className="border p-1 rounded w-16"
                        />
                    </span>
                    <select
                        value={table.getState().pagination.pageSize}
                        onChange={e => {
                            table.setPageSize(Number(e.target.value))
                        }}
                    >
                        {[10, 20, 30, 40, 50].map(pageSize => (
                            <option key={pageSize} value={pageSize}>
                                Show {pageSize}
                            </option>
                        ))}
                    </select>
                    {isFetching ? 'Loading...' : null}
                </div>
                <div>{table.getRowModel().rows.length} Rows</div>
            </main>
        </>
    )
}



const columnHelper = createColumnHelper<RouterOutputs['example']['getAll'][number]>()

// Make some columns!
const columns = [
    // Display Column
    columnHelper.display({
        id: 'actions',
        cell: props => <button>delete</button>,
    }),
    // Grouping Column
    columnHelper.group({
        header: 'Name',
        columns: [
            // Accessor Column
            columnHelper.accessor('firstName', {
                cell: info => info.getValue(),
            }),
            // Accessor Column
            columnHelper.accessor(row => row.lastName, {
                id: 'lastName',
                cell: info => info.getValue(),
                header: () => <span>Last Name</span>,
            }),
        ],
    }),
    // Grouping Column
    columnHelper.group({
        header: 'Info',
        columns: [
            // Accessor Column
            columnHelper.accessor('age', {
                header: () => 'Age',
            }),
            // Grouping Column
            columnHelper.group({
                header: 'More Info',
                columns: [
                    // Accessor Column
                    columnHelper.accessor('visits', {
                        header: () => <span>Visits</span>,
                    }),
                    // Accessor Column
                    columnHelper.accessor('status', {
                        header: 'Status',
                    }),
                    // Accessor Column
                    columnHelper.accessor('progress', {
                        header: 'Profile Progress',
                    }),
                ],
            }),
        ],
    }),
]